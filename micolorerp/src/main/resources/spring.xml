<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd"
       default-autowire="byName">
    <context:annotation-config/>
    <aop:config proxy-target-class="true"/>
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">
        <property name="jdbcUrl" value="${db.url}"></property>
        <property name="driverClass" value="${db.driverClassName}"></property>
        <property name="user" value="${db.username}"></property>
        <property name="password" value="${db.password}"></property>
        <property name="maxPoolSize" value="40"></property>
        <property name="minPoolSize" value="1"></property>
        <property name="initialPoolSize" value="1"></property>
        <property name="maxIdleTime" value="20"></property>
    </bean>

    <!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">-->
        <!--&lt;!&ndash; Connection Info &ndash;&gt;-->
        <!--<property name="driverClassName" value="${jdbc.driver}"/>-->
        <!--<property name="url" value="${jdbc.url}"/>-->
        <!--<property name="username" value="${jdbc.username}"/>-->
        <!--<property name="password" value="${jdbc.password}"/>-->

        <!--&lt;!&ndash; Connection Pooling Info &ndash;&gt;-->
        <!--<property name="maxActive" value="${dbcp.maxActive}"/>-->
        <!--<property name="maxIdle" value="${dbcp.maxIdle}"/>-->
        <!--<property name="defaultAutoCommit" value="false"/>-->
        <!--&lt;!&ndash; 连接Idle一个小时后超时 &ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="3600000"/>-->
        <!--<property name="minEvictableIdleTimeMillis" value="3600000"/>-->
    <!--</bean>-->

    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="hibernateProperties">
            <props>

                <!-- 设置Hibernate方言 -->
                <prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
                <!-- 是否打印sql -->
                <prop key="hibernate.show_sql">true</prop>
                <!-- 格式化sql -->
                <prop key="hibernate.format_sql">true</prop>
                <!-- 是否自动更新表 -->
                <!--<prop key="hibernate.hbm2ddl.auto">update</prop>-->

                <!-- 最大抓取深度，如果为0，则关闭默认的外连接抓取。建议值为0-3 -->
                <prop key="hibernate.max_fetch_depth">3</prop>
                <!-- 用于生成有助于调试的注释信息，默认为关闭 -->
                <prop key="hibernate.use_sql_comments">true</prop>
                <!-- 懒加载-->
                <prop key="hibernate.enable_lazy_load_no_trans">false</prop>
            </props>
        </property>

        <property name="dataSource">
            <ref bean="dataSource"/>
        </property>

        <!-- 注意：我用的是Annotation的方式配置的Hibernate，这里的property的name是annotatedClasses -->
        <property name="packagesToScan">
            <list>
                <value>com.micolor.entity.demo</value>
                <value>com.micolor.entity.system</value>
                <value>com.micolor.entity.userinterface</value>
            </list>
        </property>
    </bean>
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED"/>
            <!-- 支持当前事务，如果执行到save开头的任何方法时没有事务则开启一个事务 这是最常见的方式 -->
            <tx:method name="edit*" propagation="REQUIRED"/>
            <!-- 支持当前事务，如果执行到save开头的任何方法时没有事务则开启一个事务 这是最常见的方式 -->
            <tx:method name="update*" propagation="REQUIRED"/>
            <!-- 支持当前事务，如果执行到save开头的任何方法时没有事务则开启一个事务 这是最常见的方式 -->
            <tx:method name="add*" propagation="REQUIRED"/>
            <!-- 支持当前事务，如果执行到save开头的任何方法时没有事务则开启一个事务  这是最常见的方式 -->
            <tx:method name="delete*" propagation="REQUIRED"/>
            <!-- 支持当前事务，如果执行到save开头的任何方法时没有事务则开启一个事务  这是最常见的方式 -->
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <!-- 支持当前事务，如果当前没有事务，就以非事务方式执行。只读 -->
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <!--  支持当前事务，如果当前没有事务，就以非事务方式执行。只读 -->
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <tx:annotation-driven proxy-target-class="true"/>

    <aop:config proxy-target-class="true">
        <aop:pointcut id="txMethod"
                      expression="execution(* com.micolor.module.userinterface.*.service.*.*(..)) or execution(* com.micolor.module.system.*.service.*.*(..)) or execution(* com.micolor.module.demo.*.service.*.*(..)) or execution(* com.micolor.*.service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txMethod"/>
    </aop:config>
    <context:component-scan base-package="com.micolor"/>

    <!--开启这个配置，spring才能识别@Scheduled注解-->
    <task:annotation-driven scheduler="qbScheduler" mode="proxy"/>
    <task:scheduler id="qbScheduler" pool-size="10"/>
</beans>